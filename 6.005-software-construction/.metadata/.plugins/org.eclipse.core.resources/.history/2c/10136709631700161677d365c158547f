/**
 * Author: dnj, Hank Huang
 * Date: March 7, 2009
 * 6.005 Elements of Software Construction
 * (c) 2007-2009, MIT 6.005 Staff
 */
package sudoku;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import sat.env.Environment;
import sat.env.Variable;
import sat.formula.Clause;
import sat.formula.Formula;
import sat.formula.Literal;
import sat.formula.PosLiteral;

/**
 * Sudoku is an immutable abstract datatype representing instances of Sudoku.
 * Each object is a partially completed Sudoku puzzle.
 */
public class Sudoku {
    // dimension: standard puzzle has dim 3
    private final int dim;
    // number of rows and columns: standard puzzle has size 9
    private final int size;
    // known values: square[i][j] represents the square in the ith row and jth
    // column,
    // contains -1 if the digit is not present, else i>=0 to represent the digit
    // i+1
    // (digits are indexed from 0 and not 1 so that we can take the number k
    // from square[i][j] and
    // use it to index into occupies[i][j][k])
    private final int[][] square;
    // occupies [i,j,k] means that kth symbol occupies entry in row i, column j
    private final Variable[][][] occupies;

    /*
     * Rep invariant:
     * 		dim is a number > 0
     * 		size is equal to dim*dim
     * 		square is a size*size array
     * 		square.length == size
     * 		square[i].length == size for all i
     * 		each entry in square is a value between -1 and size-1
     * 		occupies.length == occupies[i].length == size for all i
     * 		
     */
    
    private void checkRep() {
        assert dim>0: "dim is positive";
        assert size == dim*dim: "size equals dim*dim";
        assert square.length == size: "square's number of rows is equal to size";
        assert occupies.length == size: "occupies' number of rows is equal to size";
        for (int i = 0; i < square.length; i++) {
        	assert square[i].length == size: "square's number of columns is equal to size";
        	assert occupies[i].length == size: "occupies' number of columns is equal to size";
        	for (int j = 0; j < square[i].length; j++) {
        		assert (square[i][j] >= -1) && (square[i][j] <= size-1): "square's entries are valid";
        	}
        }
    }

    /**
     * create an empty Sudoku puzzle of dimension dim.
     * 
     * @param dim
     *            size of one block of the puzzle. For example, new Sudoku(3)
     *            makes a standard Sudoku puzzle with a 9x9 grid.
     */
    public Sudoku(int dim) {
        this.dim = dim;
        this.size = dim*dim;
        this.square = new int[this.size][this.size];
        for (int i = 0; i < this.square.length; i++) {
        	for (int j = 0; j < this.square[i].length; j++) {
        		this.square[i][j] = -1;
        	}
        }
        this.occupies = new Variable[this.size][this.size][this.size];
        checkRep();
    }

    /**
     * create Sudoku puzzle
     * 
     * @param square
     *            digits or blanks of the Sudoku grid. square[i][j] represents
     *            the square in the ith row and jth column, contains 0 for a
     *            blank, else i to represent the digit i. So { { 0, 0, 0, 1 }, {
     *            2, 3, 0, 4 }, { 0, 0, 0, 3 }, { 4, 1, 0, 2 } } represents the
     *            dimension-2 Sudoku grid: 
     *            
     *            ...1 
     *            23.4 
     *            ...3
     *            41.2
     * 
     * @param dim
     *            dimension of puzzle Requires that dim*dim == square.length ==
     *            square[i].length for 0<=i<dim.
     */
    public Sudoku(int dim, int[][] square) {
        this.dim = dim;
        this.size = dim*dim;
        this.square = square;
        this.occupies = new Variable[this.size][this.size][this.size];
        for (int i = 0; i < this.square.length; i++) {
        	for (int j = 0; j < this.square.length; j++) {
        		for (int k = 0; k < this.square.length; k++) {
        			this.occupies[i][j][square[i][j]-1] = new Variable("v_"+Integer.toString(i)+","+Integer.toString(j)+","+Integer.toString(k));
        		}
        	}
        }
        checkRep();
    }

    /**
     * Reads in a file containing a Sudoku puzzle.
     * 
     * @param dim
     *            Dimension of puzzle. Requires: at most dim of 3, because
     *            otherwise need different file format
     * @param filename
     *            of file containing puzzle. The file should contain one line
     *            per row, with each square in the row represented by a digit,
     *            if known, and a period otherwise. With dimension dim, the file
     *            should contain dim*dim rows, and each row should contain
     *            dim*dim characters.
     * @return Sudoku object corresponding to file contents
     * @throws IOException
     *             if file reading encounters an error
     * @throws ParseException
     *             if file has error in its format
     */
    public static Sudoku fromFile(int dim, String filename) throws IOException,
            ParseException {
    	if ((dim > 3) || (dim <= 0)) {
    		throw new IOException();
    	}
		BufferedReader reader = new BufferedReader(new FileReader(filename));
		int[][] square = new int [dim*dim][dim*dim];
		String text = null;
		int rowCounter = 0;
		int size = dim*dim;
		while ((text = reader.readLine()) != null) {
			if (text.length() != dim*dim) {
				throw new ParseException("Row has incorrect number of values");
			}
			for (int i = 0; i < text.length(); i++) {
				char val = text.charAt(i);
				if (val == '.') {
					square[rowCounter][i] = 0;
				}
				else if ((Character.getNumericValue(val) > 0) && (Character.getNumericValue(val) <= size)) {
					square[rowCounter][i] = Character.getNumericValue(val);
				}
				else {
					throw new ParseException("Invalid value in puzzle");
				}
			}
			rowCounter++;
		}
		if (rowCounter != dim*dim) {
			throw new ParseException("Puzzle has incorrect number of rows");
		}
		return new Sudoku(dim,square);
    }

    /**
     * Exception used for signaling grammatical errors in Sudoku puzzle files
     */
    @SuppressWarnings("serial")
    public static class ParseException extends Exception {
        public ParseException(String msg) {
            super(msg);
        }
    }

    /**
     * Produce readable string representation of this Sukoku grid, e.g. for a 4
     * x 4 sudoku problem: 
     *   12.4 
     *   3412 
     *   2.43 
     *   4321
     * 
     * @return a string corresponding to this grid
     */
    public String toString() {
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < this.square.length; i++) {
        	for (int j = 0; j < this.square.length; j++) {
        		if (square[i][j] == -1) {
        			res.append(".");
        		}
        		else {
        			res.append(Integer.toString(square[i][j]+1));
        		}
        	}
        	res.append("\n");
        }
        return res.toString();
    }

    /**
     * @return a SAT problem corresponding to the puzzle, using variables with
     *         names of the form occupies(i,j,k) to indicate that the kth symbol
     *         occupies the entry in row i, column j
     */
    public Formula getProblem() {
    	Formula consistency = new Formula();
    	for (int i = 0; i < size; i++) {
    		for (int j = 0; j < size; j++) {
    			int k = square[i][j];
    			if (k >= 0) {
    				Variable v_ijk = occupies[i][j][k];
    				Literal l_ijk = PosLiteral.make(v_ijk);
    				Clause c_ijk = new Clause(l_ijk);
    				consistency = consistency.addClause(c_ijk);
    			}
    		}
    	}
    	
    	Formula onePerSquare = new Formula();
    	

        
        throw new RuntimeException("not yet implemented.");
    }

    /**
     * Interpret the solved SAT problem as a filled-in grid.
     * 
     * @param e
     *            Assignment of variables to values that solves this puzzle.
     *            Requires that e came from a solution to this.getProblem().
     * @return a new Sudoku grid containing the solution to the puzzle, with no
     *         blank entries.
     */
    public Sudoku interpretSolution(Environment e) {

        // TODO: implement this.
        throw new RuntimeException("not yet implemented.");
    }

}
